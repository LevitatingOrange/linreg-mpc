#include <obliv.oh>
#include <stdio.h>
#include <signal.h>
#include "linear.h"
#include "linear.oh"
#include "fixed.h"
#include "fixed.oh"
#include "util.h"


int flag = 0;
void sig_handler(int signo) {
	printf("Shutting down.\n");
	flag = 1;
}

// solves a symmetric, positive definite linear system using conjugate gradient descent
// and scaling.
void cgd(void *v) {
	double time_start = wallClock();

	struct sigaction act;
	act.sa_handler = &sig_handler;
	sigaction(SIGINT, &act, NULL);

	linear_system_t *ls = v;
	// allocate space for obliv values and read inputs
	// we can do most computations in-place in this case
	size_t d = ls->a.d[0];

	ofixed_t *a = malloc(((d * (d+1)) / 2) * sizeof(ofixed_t));
	for (size_t ii = 0; ii < ((d * (d+1)) / 2); ii++) {
		ofixed_init(&a[ii]);
	}
	ofixed_t *b = malloc(d * sizeof(ofixed_t));
	for (size_t ii = 0; ii < d; ii++) {
		ofixed_init(&b[ii]);
	}

	if(read_symmetric_linear_system(ls, a, b)) {
		fprintf(stderr, "Could not read inputs.");
		ls->beta.len = -1;
		free(a);
		free(b);
		return;
	}
	// allocate output vector if not already done and we are party 2
	if(!(ls->beta.value) && ocCurrentParty() == 2) {
		ls->beta.len = d;
		ls->beta.value = malloc(d * sizeof(uint64_t));
	}

	ofixed_t *x = malloc(d * sizeof(ofixed_t));
	ofixed_t *ax = malloc(d * sizeof(ofixed_t));
	ofixed_t *p = malloc(d * sizeof(ofixed_t));
	ofixed_t *g = malloc(d * sizeof(ofixed_t));
	ofixed_t *gscl = malloc(d * sizeof(ofixed_t));
	ofixed_t *pA = malloc(d * sizeof(ofixed_t));
	ofixed_t *result = malloc(d * sizeof(ofixed_t));
	for (size_t ii = 0; ii < d; ii++) {
		ofixed_init(&x[ii]);
		ofixed_init(&ax[ii]);
		ofixed_init(&p[ii]);
		ofixed_init(&g[ii]);
		ofixed_init(&gscl[ii]);
		ofixed_init(&pA[ii]);
		ofixed_init(&result[ii]);
	}

	// loop for a fixed number of iterations
	fixed_t temp;
	ofixed_t obigtemp;
	ofixed_init(&obigtemp);
	ofixed_t ng;
	ofixed_init(&ng);
	ofixed_t *ng_ptr = &ng;
	ofixed_t q;
	ofixed_init(&q);
	ofixed_t eta;
	ofixed_init(&eta);
	ofixed_t gamma;
	ofixed_init(&gamma);
	ofixed_t gAp;
	ofixed_init(&gAp);
	ofixed_t gp;
	ofixed_init(&gp);

	int prec = ls->precision;

	// initialise
	// Ax(:) = A*x;
	// g(:) = Ax - b;
	// ng = inf_norm(g)
	// gscl = g/ng
	// p = gscl
	for(size_t i = 0; i < d; i++) {
		ofixed_sub(&g[i], g[i], b[i]);
		ofixed_abs(&obigtemp, g[i]);
		obliv if(ofixed_cmp(obigtemp, ng) > 0){
			ofixed_copy(ng_ptr, obigtemp);
		}
	}

	for(size_t i = 0; i < d; i++) {
		ofixed_div(&p[i], g[i], ng, prec);
	}

	if(ocCurrentParty() == 2) {printf("OT time: %f\nStarting iterations.\n", wallClock() - time_start);}
	//double time = wallClock();
	obliv bool q_nonzero = true;
	for(size_t t = 0; !flag && t < ls->num_iterations; t++) {
		/*// pscl(:) = p;
		for(size_t i = 0; i < d; i++) {
			obig_mul_signed(&pscl[i], p[i], d_big);
			//obig_copy_signed(&pscl[i], p[i]);
		}
		*/
		// pA(:) = p'*A;
		for(size_t i = 0; i < d; i++) {
			ofixed_import(&pA[i], 0);
			for(size_t j = 0; j < d; j++) {
				ofixed_mul(&obigtemp, a[idx(i,j)], p[j], prec);
				ofixed_add(&pA[i], pA[i], obigtemp);
			}
		}

		// q(:) = pA*p;
		ofixed_inner_product(&q, pA, p, prec, d);
		// gp(:) = g'*p;
		ofixed_inner_product(&gp, g, p, prec, d);

		// eta(:) = mydivide(TT,gp,q);
		ofixed_div(&eta, gp, q, prec);

		// etap(:) = eta*p;
		// x(:) = x - etap;
		// etaAp(:) = eta*(pA)';
		// g(:) = g - etaAp;
		// ng(:) = max(abs(g));
		ofixed_import(ng_ptr, 0);
		for(size_t i = 0; i < d; i++) {
			ofixed_mul(&obigtemp, p[i], eta, prec);
			ofixed_sub(&x[i], x[i], obigtemp);
			ofixed_mul(&obigtemp, eta, pA[i], prec);
			ofixed_sub(&g[i], g[i], obigtemp);
			ofixed_abs(&obigtemp, g[i]);
			obliv if(ofixed_cmp(obigtemp, ng) > 0){
				ofixed_copy(ng_ptr, obigtemp);
			}
		}

		// gscl(:) = mydivide(TT,g,ng);
		for(size_t i = 0; i < d; i++) {
			ofixed_div(&gscl[i], g[i], ng, prec);
		}
		// gAp(:) = pA*gscl;
		ofixed_inner_product(&gAp, pA, gscl, prec, d);
		// gamma(:) = mydivide(TT,gAp,q);
		ofixed_div(&gamma, gAp, q, prec);
		// gammap(:) = gamma*p;
		// p(:) = gscl - gammap;
		for(size_t i = 0; i < d; i++) {
			ofixed_mul(&obigtemp, p[i], gamma, prec);
			ofixed_sub(&p[i], gscl[i], obigtemp);
		}

		if(ocCurrentParty() == 2) printf("Iteration %zd (x):\n", t);
		for(size_t i = 0; i < d; i++) {
			bool q_nonzero_revealed;
			revealOblivBool(&q_nonzero_revealed, q_nonzero, 0);
			ofixed_reveal(&temp, q_nonzero_revealed ? x[i] : result[i], 2);
			//p[i] = g[i] + ofixed_mul(gamma, p[i], prec);
			//revealOblivInt(&temp, beta[i], 2);
			if(ocCurrentParty() == 2) printf("%20.15f ", fixed_to_double(temp, prec));
		}
		/*if(ocCurrentParty() == 2) printf("\nIteration %d (g):\n", t);
		for(size_t i = 0; i < d; i++) {
			otemp = obig_export_onative_signed(g[i]);
			revealOblivLLong(&temp, otemp, 2);
			if(ocCurrentParty() == 2) printf("%20.15f ", fixed_to_double(temp, prec));
		}*/
		ofixed_reveal(&temp, gamma, 2);
		if(ocCurrentParty() == 2) printf("\nGamma: %30.20f ", fixed_to_double(temp, prec));
		ofixed_reveal(&temp, eta, 2);
		if(ocCurrentParty() == 2) printf("\nEta: %30.20f ", fixed_to_double(temp, prec));
		ofixed_reveal(&temp, q, 2);
		if(ocCurrentParty() == 2) printf("\nq: %30.20f ", fixed_to_double(temp, prec));
		ofixed_reveal(&temp, ng, 2);
		if(ocCurrentParty() == 2) printf("\nng: %30.20f ", fixed_to_double(temp, prec));
		if(ocCurrentParty() == 2) {
			if(!ocInDebugProto())  {
				printf("\nIteration %zd gate count: %lld", t, yaoGateCount());
			}
			printf("\nIteration %zd time: %f\n", t, wallClock() - time_start);
		}

		flag = ocBroadcastBool(flag, 1) || ocBroadcastBool(flag, 2);
	}


	for(size_t i = 0; i < d; i++) {
			ofixed_copy(&result[i], x[i]);
	}

	// return the result
	for(size_t i = 0; i < d; i++) {
		ofixed_reveal(ls->beta.value + i, result[i], 2); // <- is this right, or should it be &ls->beta.value[i]? <- isn't that the same?
		//revealOblivInt(ls->beta.value + i, beta[i], 2);
	}
	if(!ocInDebugProto()) {
		ls->gates = yaoGateCount();
	}
	ofixed_free(&ng);
	ofixed_free(&q);
	ofixed_free(&eta);
	ofixed_free(&gamma);
	ofixed_free(&obigtemp);
	ofixed_free(&gAp);
	ofixed_free(&gp);

	for (size_t ii = 0; ii < ((d * (d+1)) / 2); ii++) {
		ofixed_free(&a[ii]);
	}
	for (size_t ii = 0; ii < d; ii++) {
		ofixed_free(&b[ii]);
		ofixed_free(&x[ii]);
		ofixed_free(&ax[ii]);
		ofixed_free(&p[ii]);
		ofixed_free(&g[ii]);
		ofixed_free(&gscl[ii]);
		ofixed_free(&pA[ii]);
		ofixed_free(&result[ii]);
	}
	free(a);
  free(b);
  free(x);
  free(ax);
  free(p);
  free(g);
  free(gscl);
  free(pA);
  free(result);
	return;
}
