#include <obliv.oh>
#include <stdio.h>
#include "linear.h"
#include "linear.oh"
#include "fixed.h"
#include "fixed.oh"

#define ABS(a) (a > 0 ? a : - a)


// solves a symmetric, positive definite linear system using LDL^T decomposition
void cgd(void *v) {
	linear_system_t *ls = v;
	// allocate space for obliv values and read inputs
	// we can do most computations in-place in this case
	size_t d = ls->a.d[0];
	obliv fixed32_t *a = alloca(((d * (d+1)) / 2) * sizeof(obliv fixed32_t));
	obliv fixed32_t *b = alloca(d * sizeof(obliv fixed32_t));

	if(read_symmetric_linear_system(ls, a, b)) {
		fprintf(stderr, "Could not read inputs.");
		ls->beta.len = -1;
		return;
	}

	// allocate output vector if not already done and we are party 2
	if(!(ls->beta.value) && ocCurrentParty() == 2) {
		ls->beta.len = d;
		ls->beta.value = malloc(d * sizeof(fixed32_t));
	}


	// loop for a fixed number of iterations
	
	obliv fixed32_t *g = alloca(d * sizeof(obliv fixed32_t));
	obliv fixed32_t *p = alloca(d * sizeof(obliv fixed32_t));
	obliv fixed32_t *beta = alloca(d * sizeof(obliv fixed32_t));
	obliv fixed32_t *ap = alloca(d * sizeof(obliv fixed32_t));
	obliv fixed32_t *m = alloca(d * sizeof(obliv fixed32_t));
	fixed32_t temp;
	
	int prec = ls->precision;

	for(size_t i = 0; i < d; i++) {
		// scaling diagonal matrix
		m[i] = 0;
		for(size_t j = 0; j < d; j++) {
			obliv fixed32_t a_ij = a[idx(i,j)];
			obliv if(a_ij > 0) {
				m[i] += a_ij;
			} else {
				m[i] -= a_ij;
			}
		}
		m[i] = ofixed_sqrt(m[i], prec);
	}

	if(ocCurrentParty() == 2) printf("m: ", fixed_to_double(temp, prec));
	for(size_t i = 0; i < d; i++) {
		revealOblivInt(&temp, m[i], 2);
		if(ocCurrentParty() == 2) printf("%10.4f ", fixed_to_double(temp, prec));
	}
	if(ocCurrentParty() == 2) printf("\n");

	// scale A and b
	for(size_t i = 0; i < d; i++) {
		for(size_t j = 0; j <= i; j++) { // A is symmetric
			a[idx(i,j)] = ofixed_div(a[idx(i,j)], m[i], prec);
			a[idx(i,j)] = ofixed_div(a[idx(i,j)], m[j], prec);
		}
		b[i] = ofixed_div(b[i], m[i], prec);
	}


	// initialise
	for(size_t i = 0; i < d; i++) {
		beta[i] = 0;
		g[i] = b[i];
		p[i] = g[i];
	}
	
	for(size_t t = 0; t < ls->num_iterations; t++) {
		obliv fixed32_t eta = 0, gamma = 0, q = 0;
		for(size_t i = 0; i < d; i++) {
			ap[i] = 0;
			for(size_t j = 0; j < d; j++) {
				ap[i] += ofixed_mul(a[idx(i,j)], p[j], prec);
			}
			q += ofixed_mul(p[i], ap[i], prec);
		}

		for(size_t i = 0; i < d; i++) {
			eta += ofixed_mul(ofixed_div(g[i], q, prec), g[i], prec);
		}

		for(size_t i = 0; i < d; i++) {
			beta[i] += ofixed_mul(eta, p[i], prec);
		}

		for(size_t i = 0; i < d; i++) {
			g[i] -= ofixed_mul(eta, ap[i], prec);
			gamma += ofixed_mul(ofixed_div(g[i], eta, prec), ofixed_div(g[i], q, prec), prec);
		}
		
		revealOblivInt(&temp, eta, 2);
		if(ocCurrentParty() == 2) printf("eta: %10.4f   ", fixed_to_double(temp, prec));
		revealOblivInt(&temp, q, 2);
		if(ocCurrentParty() == 2) printf("q: %10.4f   x: ", fixed_to_double(temp, prec));
		for(size_t i = 0; i < d; i++) {
			p[i] = g[i] + ofixed_mul(gamma, p[i], prec);
			revealOblivInt(&temp, beta[i], 2);
			if(ocCurrentParty() == 2) printf("%10.4f ", fixed_to_double(temp, prec));
		}
		if(ocCurrentParty() == 2) printf("\n");
	}

	// re-scale beta
	for(size_t i = 0; i < d; i++) {
		beta[i] = ofixed_div(beta[i], m[i], prec);
	}

	// return the result
	for(size_t i = 0; i < d; i++) {
		revealOblivInt(ls->beta.value + i, beta[i], 2);
	}

	ls->gates = yaoGateCount();
	return;

}
