#include <obliv.oh>
#include "linear.h"
#include "linear.oh"
#include "fixed.h"
#include "fixed.oh"



// solves a symmetric, positive definite linear system using cholesky decomposition
void cholesky(void *v) {
	linear_system_t *ls = v;
	// allocate space for obliv values and read inputs
	size_t d = ls->a.d[0];
	obliv fixed32_t *a = alloca(((d * (d+1)) / 2) * sizeof(obliv fixed32_t));
	obliv fixed32_t *b = alloca(d * sizeof(obliv fixed32_t));
	obliv fixed32_t *y = alloca(d * sizeof(obliv fixed32_t));
	if(read_symmetric_linear_system(ls, a, b)) {
		fprintf(stderr, "Could not read inputs.");
		ls->beta.len = -1;
		return;
	}

	// allocate output vector if not already done and we are party 2
	if(!(ls->beta.value) && ocCurrentParty() == 2) {
		ls->beta.len = d;
		ls->beta.value = malloc(d * sizeof(fixed32_t));
	}

	// decompose a into L^T L
	for(size_t j = 0; j < d; j++) {
		for(size_t k = 0; k < j; k++) {
			for(size_t i = j; i < d; i++) {
				a[idx(i,j)] -= ofixed_mul(a[idx(i,k)], a[idx(j,k)], ls->precision);
			}
		}
		a[idx(j,j)] = ofixed_sqrt(a[idx(j,j)], ls->precision);
		for(size_t k = j + 1; k < d; k++) {
			a[idx(k,j)] = ofixed_div(a[idx(k,j)], a[idx(j,j)], ls->precision);
		}
	}
	
	// compute y, where L^T y = b
	for(size_t i = 0; i < d; i++) {
		for(size_t j = 0; j < i; j++) {
			b[i] -= ofixed_mul(a[idx(i,j)], y[j], ls->precision);
		}
		y[i] = ofixed_div(b[i], a[idx(i,i)], ls->precision);
	}

	// compute beta, where L beta = y
	for(size_t i = d-1; i >= 0; i--) {
		for(size_t j = d-1; j > i; j--) {
			y[i] -= ofixed_mul(a[idx(j,i)], ls->beta.value[j], ls->precision);
		}
		revealOblivInt(&(ls->beta)+i, ofixed_div(y[i], a[idx(i,i)], ls->precision), 2);
	}

	ls->gates = yaoGateCount();
	return;

}
