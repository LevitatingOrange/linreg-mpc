#include <obliv.oh>
#include "linear.h"
#include "linear.oh"
#include "fixed.h"
#include "fixed.oh"
#include "obig.oh"



// solves a symmetric, positive definite linear system using cholesky decomposition
void cholesky(void *v) {
	linear_system_t *ls = v;
	// allocate space for obliv values and read inputs
	size_t d = ls->a.d[0];
	obig *a = alloca(((d * (d+1)) / 2) * sizeof(obig));
	for (size_t ii = 0; ii < ((d * (d+1)) / 2); ii++) {
		obig_init(&a[ii], 4+(ls->precision/8));
	}

	obig *b = alloca(d * sizeof(obig));
	obig *y = alloca(d * sizeof(obig));
	obig *beta = alloca(d * sizeof(obig));
	for (size_t ii = 0; ii < d; ii++) {
		obig_init(&b[ii], 4+(ls->precision/8));
		obig_init(&y[ii], 4+(ls->precision/8));
		obig_init(&beta[ii], 4+(ls->precision/8));
	}

	obig temp;
	obig_init(&temp, 4+(ls->precision/8));

	if(read_symmetric_linear_system(ls, a, b)) {
		fprintf(stderr, "Could not read inputs.");
		ls->beta.len = -1;
		return;
	}

	// allocate output vector if not already done and we are party 2
	if(!(ls->beta.value) && ocCurrentParty() == 2) {
		ls->beta.len = d;
		ls->beta.value = malloc(d * sizeof(fixed32_t));
	}

	// decompose a into L^T L
	for(size_t j = 0; j < d; j++) {
		for(size_t k = 0; k < j; k++) {
			for(size_t i = j; i < d; i++) {
				ofixed_mul(&temp, a[idx(i,k)], a[idx(j,k)], ls->precision);
				ofixed_sub(&a[idx(i,j)], a[idx(i,j)], temp);
				//a[idx(i,j)] -= ofixed_mul(a[idx(i,k)], a[idx(j,k)], ls->precision);
			}
		}
		ofixed_sqrt(&a[idx(j,j)], a[idx(j,j)], ls->precision);
		//a[idx(j,j)] = ofixed_sqrt(a[idx(j,j)], ls->precision);
		for(size_t k = j + 1; k < d; k++) {
			ofixed_div(&a[idx(k,j)], a[idx(k,j)], a[idx(j,j)], ls->precision);
			//a[idx(k,j)] = ofixed_div(a[idx(k,j)], a[idx(j,j)], ls->precision);
		}
	}
	
	// compute y, where L^T y = b
	for(size_t i = 0; i < d; i++) {
		for(size_t j = 0; j < i; j++) {
			ofixed_mul(&temp, a[idx(i,j)], y[j], ls->precision);
			ofixed_sub(&b[i], b[i], temp);
			//b[i] -= ofixed_mul(a[idx(i,j)], y[j], ls->precision);
		}
		ofixed_div(&y[i], b[i], a[idx(i,i)], ls->precision);
		//y[i] = ofixed_div(b[i], a[idx(i,i)], ls->precision);
	}

	// compute beta, where L beta = y
	for(ssize_t i = d-1; i >= 0; i--) {
		for(ssize_t j = d-1; j > i; j--) {
			ofixed_mul(&temp, a[idx(j,i)], beta[j], ls->precision);
			ofixed_sub(&y[i], y[i], temp);
			//y[i] -= ofixed_mul(a[idx(j,i)], beta[j], ls->precision);
		}
		ofixed_div(&beta[i], y[i], a[idx(i,i)], ls->precision);
		//beta[i] = ofixed_div(y[i], a[idx(i,i)], ls->precision);
		obliv int32_t temp = obig_export_onative_signed(beta[i]);
		revealOblivInt(ls->beta.value + i, temp, 2);
	}

	ls->gates = yaoGateCount();

	obig_free(&temp);
	for (size_t ii = 0; ii < ((d * (d+1)) / 2); ii++) {
		obig_free(&a[ii]);
	}
	for (size_t ii = 0; ii < d; ii++) {
		obig_free(&b[ii]);
		obig_free(&y[ii]);
		obig_free(&beta[ii]);
	}
	return;

}
