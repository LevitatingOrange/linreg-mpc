#include <obliv.oh>
#include "fixed.oh"

// returns a mask of the lowest (FIXED_BIT_SIZE + p) bits.
// saves garbled gates for some operations
static int64_t fixed_mask(int p) {
	return ((1ll << (FIXED_BIT_SIZE + p)) - 1);
}


obliv fixed32_t ofixed_add(obliv fixed32_t a, obliv fixed32_t b) {
	return a + b;
}

obliv fixed32_t ofixed_sub(obliv fixed32_t a, obliv fixed32_t b) {
	return a - b;
}

obliv fixed32_t ofixed_mul(obliv fixed32_t a, obliv fixed32_t b, int p) {
	return (obliv fixed32_t) (((obliv int64_t) a * b) >> p);
}

obliv fixed32_t ofixed_div(obliv fixed32_t a, obliv fixed32_t b, int p) {
	return (obliv fixed32_t) (((obliv int64_t) a << p) / b);
}

obliv fixed32_t ofixed_sqrt(obliv fixed32_t a, int p) {
	// limit number of bits
	int64_t mask = fixed_mask(p);
	obliv int64_t x = ((obliv int64_t) a << p) & mask;
	obliv int64_t r = 0;
	for(int64_t e = mask + 1; e != 0; e >>= 2) {
		obliv if((x & mask) >= ((r + e) & mask)) {
			x -= r + e;
			r = ((r >> 1) + e) & mask;
		} else {
			r = r >> 1;
		}
	}
	return (obliv fixed32_t) r;
}

