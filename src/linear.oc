#include "linear.h"
#include "linear.oh"
#include "check_error.h"
#include "secure_multiplication/config.h"
#include "input.h"
#include "util.h"
#include <time.h>

int read_symmetric_linear_system_from_data_providers(linear_system_t *ls, obliv fixed32_t *a, obliv fixed32_t *b) {
	// This function must only be executed by the parties that run the GC protocol: CSP and Evaluator,
	// with is'd 1 and 2 and c->party = 0 and 1, respectively.
	int num_data_providers = ls->num_data_providers;
	printf("party %d listening for %d inputs on port %s\n", ocCurrentParty(), num_data_providers, ls->port);
	DualconR* conn = dcrConnect(ls->port, num_data_providers);
	size_t d = ls->a.d[0];

	obliv uint32_t *sum_a = (obliv uint32_t *) a; // sum using unsigned arithmetic
	obliv uint32_t *sum_b = (obliv uint32_t *) b;
	for(int ij = 0; ij < d * (d+1) / 2; ij++) {
		sum_a[ij] = 0;
	}
	for(int i = 0; i < d; i++) {
		sum_b[i] = 0;
	}
	obliv uint32_t *share_a = malloc((d*(d + 1)/2) * sizeof(obliv uint32_t));
	obliv uint32_t *share_b = malloc(d * sizeof(obliv uint32_t));

	struct timespec time_start, time_end;
	clock_gettime(CLOCK_MONOTONIC, &time_start);
	for(int k = 3; k < num_data_providers+3; k++) {
		printf("%s receiving A from party %d\n", ocCurrentParty()==1?"CSP":"Evaluator",k);
		dcrRecvIntArray(conn, share_a, d*(d + 1)/2, k);
		printf("%s received A from party %d\n", ocCurrentParty()==1?"CSP":"Evaluator",k);
		for(int ij = 0; ij < d * (d+1) / 2; ij++) {
			sum_a[ij] += share_a[ij];
		}
		printf("%s receiving b from party %d\n", ocCurrentParty()==1?"CSP":"Evaluator",k);
		dcrRecvIntArray(conn, share_b, d, k);
		printf("%s received b from party %d\n", ocCurrentParty()==1?"CSP":"Evaluator",k);
		for(int i = 0; i < d; i++) {
			sum_b[i] += share_b[i];
		}
	}
	clock_gettime(CLOCK_MONOTONIC, &time_end);
	if(ocCurrentParty() == 2) printf("Time taken for OT: %f\n", (time_end.tv_sec-time_start.tv_sec)+1e-9*(time_end.tv_nsec-time_start.tv_nsec));

/*
	// DEBUG
	if(ocCurrentParty()==2) printf("Printing A:\n");
	for(int i = 0; i < d; i++) {
		for(int j = 0; j <= i; j++) {
			fixed32_t x;
			revealOblivInt(&x, a[idx(i,j)], 2);
			if(ocCurrentParty() == 2) {
				printf("%f ", fixed_to_double(x, ls->precision));
			}
		}
		if(ocCurrentParty() == 2) {
			printf("\n");
		}
	}
	for(int i = 0; i < d; i++) {
		fixed32_t x;
		revealOblivInt(&x, b[i], 2);
		if(ocCurrentParty() == 2) {
			printf("%f ", fixed_to_double(x, ls->precision));
		}
	}
*/	

	
	free(share_a);
	free(share_b);
	dcrClose(conn);
	return 0;
}

int read_symmetric_linear_system_from_ls(linear_system_t *ls, obliv fixed32_t *a, obliv fixed32_t *b) {
	// party 1 inputs matrix A and vector b, party 2 inputs the masks.
	obliv fixed32_t *mask_a, *mask_b;

	size_t d;
	// check inputs for validity
	bool valid_self = (ls && (d = ls->a.d[0]) == ls->a.d[1] && ls->b.len == d);
	bool valid_both = ocBroadcastBool(valid_self, 1) && ocBroadcastBool(valid_self, 2);
	check(valid_self, "Party %'s inputs are invalid.", ocCurrentParty());
	check(valid_both, "Party %'s inputs are invalid.", 3 - ocCurrentParty());

	// check if inputs have equal dimensions
	bool equal;
	revealOblivBool(&equal, 
		feedOblivInt(d, 1) ==
		feedOblivInt(d, 2), 0);
	check(equal, "Inputs of the two parties differ.");

	// since A is symmetric, we only need to read half the matrix!
	for(size_t i = 0; i < d; i++) {
		for(size_t j = 0; j <= i; j++) {
			obliv uint32_t mask = feedOblivInt(ls->a.value[i*d+j], 2);
			a[idx(i, j)] = feedOblivInt(ls->a.value[i*d+j], 1);

			a[idx(i,j)] = ((obliv uint32_t) a[idx(i,j)] + mask);
		}
		obliv uint32_t mask = feedOblivInt(ls->b.value[i], 2);
		b[i] = feedOblivInt(ls->b.value[i], 1);
		b[i] = (obliv uint32_t) b[i] + mask;
	}

	return 0;

error:
	return -1;
}

int read_symmetric_linear_system(linear_system_t *ls, obliv fixed32_t *a, obliv fixed32_t *b) {
	// This distinction is to maintain compatibility to our tests of phase 2 only
	if(!ls->port){
		return read_symmetric_linear_system_from_ls(ls, a, b);
	} else {
		return read_symmetric_linear_system_from_data_providers(ls, a, b);
	}
}
