#include "linear.h"
#include "linear.oh"
#include "error.h"


int read_symmetric_linear_system(linear_system_t *ls, obliv fixed32_t *a, obliv fixed32_t *b) {
	// party 1 inputs matrix A and vector b, party 2 inputs the masks.
	obliv fixed32_t *mask_a, *mask_b;

	size_t d;
	// check inputs for validity
	bool valid_self = (ls && (d = ls->a.d[0]) == ls->a.d[1] && ls->b.len == d);
	bool valid_both = ocBroadcastBool(valid_self, 1) && ocBroadcastBool(valid_self, 2);
	check(valid_self, "Party %'s inputs are invalid.", ocCurrentParty());
	check(valid_both, "Party %'s inputs are invalid.", 3 - ocCurrentParty());

	// check if inputs have equal dimensions
	bool equal;
	revealOblivBool(&equal, 
		feedOblivInt(d, 1) ==
		feedOblivInt(d, 2), 0);
	check(equal, "Inputs of the two parties differ.");

	// alocate space and read inputs
	// since A is symmetric, we only need half the matrix!
	mask_a = alloca(((d * (d+1)) / 2) * sizeof(obliv fixed32_t));
	for(size_t i = 0; i < d; i++) {
		for(size_t j = 0; j <= i; j++) {
			mask_a[idx(i, j)] = feedOblivInt(ls->a.value[i*d+j], 2);
			a[idx(i, j)] = feedOblivInt(ls->a.value[i*d+j], 1);
		}
	}

	mask_b = alloca(d * sizeof(obliv fixed32_t));
	feedOblivIntArray(b, ls->b.value, d, 1);
	feedOblivIntArray(mask_b, ls->b.value, d, 2);

	// subtract the masks
	for(size_t i = 0; i < ((d * (d+1)) / 2); i++) {
		a[i] -= mask_a[i];
	}
	for(size_t i = 0; i < d; i++) {
		b[i] -= mask_b[i];
	}

	return 0;

error:
	return -1;
}
